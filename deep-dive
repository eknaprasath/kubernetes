PODS and containers :

In order to run and manage containers with Kubernetes, you will need to use pods. In this lesson, we discuss the basics of what pods are and how they are related to containers within the world of Kubernetes. We will create a simple pod and then we will look at some ways to explore and interact with pods in your Kubernetes cluster.

Pods are the smallest and most basic building block of the kubernetes model
A pod consists of one or more containers, storage resources, and a unique IP address in the Kubernetes cluster network

Node A                          Node B

pod          pod                pod
10.20.0.1  10.20.0.2          10.20.1.1
container  container          container
           container
           
 In order to run containers, Kubernetes schedules pods to run on servers in the cluster. when a pod is 
 scheduled, the server will run the containers that are part of that pod.
Here are the commands used in this lesson:

Create a simple pod running an nginx container:
cat << EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
EOF
Get a list of pods and verify that your new nginx pod is in the Running state:
kubectl get pods
Get more information about your nginx pod:
kubectl describe pod nginx
Delete the pod:
kubectl delete pod nginx

Kubernetes implements a clustered architecture. In a typical production environment, you will have
multiple servers that are able to run your workloads (containers).

These servers which actually run the containres are called nodes.

A kubrenetes cluster has one or more control servers which manage and control
the cluster and host the kubernetes API. These control servers are usually seprate from worker nodes,
which run applications within the cluster.

Controller                   Worker          Worker

Kubernetes API               POD               POD

Other control components     POD               POD

We can use kubectl to list nodes in the cluster and get more information about them:

Get a list of nodes:
kubectl get nodes

Get more information about a specific node:
kubectl describe node $node-name


NETWORKING IN KUBERNETES
When using kubernetes, it is important to understand how Kubernetes implements networking between pods
( and services ) in the cluster.

The Kubernetes networking model involves creating a virtual network across the whole cluster.
This means that every pod on the cluster has a unique IP address, and can communicate with any other pod 
in the cluster even if that other pod is running ona different node.

 Node           Node
 
 Virtual Cluster Network
 Pod           Pod
 
 Pod           Pod
 
               Pod
               
 Kubernetes supports a variety of networking plugins that implement this model in various ways.
 in this course, we will be using Flannel.
 
 Create a deployment with two nginx pods:
cat << EOF | kubectl create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.15.4
        ports:
        - containerPort: 80
EOF
Create a busybox pod to use for testing:
cat << EOF | kubectl create -f -
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    args:
    - sleep
    - "1000"
EOF
Get the IP addresses of your pods:
kubectl get pods -o wide
Get the IP address of one of the nginx pods, then contact that nginx pod from the busybox pod using the nginx pod's IP address:
kubectl exec busybox -- curl $nginx_pod_ip 



Kubernetes Architecture and Components

A Kubernetes cluster is made up of multiple individual components running on the various machines that are part of the cluster. 

The control plane components manage and control the cluster:

  . etcd: Provides distributed, synchronized data storage for the cluster state.
  . Kube-apiserver: Serves, the kubernetes API, the primary interface for the cluster.
  . Kube-controller-manager: Bundles serveral components into one package.
  . kube-scheduler: Schedules pods to run to individual nodes.
  
In addition to the control plane, each node also has:
  . Kubelet: Agent that executes containers on each node.
  . Kube-proxy: Handles network communication between nodes by adding firewall routing rules.
  
  
With kubeadm, many of these components are run as pods within the cluster itself.

Get a list of system pods running in the cluster:
kubectl get pods -n kube-system

Check the status of the kubelet service:
sudo systemctl status kubelet


